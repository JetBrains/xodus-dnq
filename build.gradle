buildscript {
    ext.kotlin_version = '1.4.30'
    ext.exodus_version = '1.3.318'
    ext.dokka_version = '1.4.30'
    ext.log4j_version = '2.8.2'

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'io.codearte.nexus-staging' version '0.21.1'
    id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
    id 'idea'
}

idea {
    project {
        jdkName = '1.8'
        vcs = 'Git'
    }
    module {
        downloadSources = true
    }
}

allprojects {
    sourceCompatibility = 1.8
    group = 'org.jetbrains.xodus'
    version = (project.hasProperty("teamcity")) ? project.teamcity["build.number"] : 'dev'

    repositories {
        mavenCentral()
        maven { url 'https://jetbrains.bintray.com/xodus' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'license'
    apply plugin: 'org.jetbrains.dokka'
    
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile 'io.github.microutils:kotlin-logging:1.5.4'

        testCompile 'junit:junit:4.12'
        testCompile "org.apache.logging.log4j:log4j-1.2-api:$log4j_version"
        testCompile "org.apache.logging.log4j:log4j-api:$log4j_version"
        testCompile "org.apache.logging.log4j:log4j-core:$log4j_version"
        testCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    }

    license {
        header rootProject.file('license/copyright.ftl')
        strictCheck true
        ext.inceptionYear = 2006
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.owner = 'JetBrains s.r.o.'
        include "**/*.kt"
        include "**/*.java"
        mapping {
            kt = 'JAVADOC_STYLE'
        }
    }

    tasks.withType(compileKotlin.class).all {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.3"
            languageVersion = "1.3"
        }
    }

    test {
        minHeapSize = '512m'
        maxHeapSize = '512m'
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
        outputs.upToDateWhen { false }
    }

    dokkaJavadoc {
        dokkaSourceSets {
            configureEach {
                reportUndocumented.set(false)
            }
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        duplicatesStrategy 'exclude'
        includeEmptyDirs false
        from project.sourceSets.main.java
        from project.sourceSets.main.kotlin
    }

    // this is a stub javadoc until we investigate and fix the following docklet error somehow:
    // java.lang.ClassCastException: com.sun.tools.javac.code.Type$AnnotatedType cannot be cast to com.sun.tools.javac.code.Type$ClassType
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from "${rootProject.projectDir}/README.MD"
    }
}

apply from: 'publishing.gradle'
